openapi: 3.0.0
servers:
  - description: Varadhi OSS API specification
    url: http://localhost:8080
info:
  version: "1.0.0"
  title:  Varadhi OSS API specification
  description: >-
    This is API specification for Varadhi-OSS.

tags:
  - name: Tenant
    description: "APIs for Varadhi tenancy management."
  - name: AlternateUrlOptions
    description: "ToDo:: For Discussion -  Alternate options for url formats."
  - name: Topic
    description: "APIs for Varadhi Topic management"
  - name: Subscription
    description: "APIs for Varadhi Subscription management."
  - name: Produce
    description: "APIs to produce message(s) to a given topic."
  - name: Consume
    description: "APIs for managing message(s) in a Subscription's DLT."
  - name: Admin
    description: "APIs for administrative tasks."
      
security:
  - jwt_access_token:
    - default
  

paths:
  /v1/tenants/:
    get:
      description: >-
        Returns the list of all tenants.
      tags: 
        - Tenant
      security: []
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenants'
        default:
          $ref: '#/components/responses/error_response'
                


  /v1/tenants/{tenant_name}:
    parameters:
      - $ref: '#/components/parameters/tenant_param'

    get:
      description: >-
        Returns a given tenant.
      tags:
        - Tenant
      security: []
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant'
        default:
          $ref: '#/components/responses/error_response'
                
    post:
      description: >-
        create a new tenant.
      tags: 
        - Tenant
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tenant'
        default:
          $ref: '#/components/responses/error_response'
          
    delete:
      description: >-
        delete an existing tenant.
      tags: 
        - Tenant
      responses:
        '200':
          description: "successful operation."
        default:
          $ref: '#/components/responses/error_response'


  /v1/tenants/{tenant_name}/projects/:
    parameters:
      - $ref: '#/components/parameters/tenant_param'

    get:
      description: >-
        Returns all projects of the given tenant.
      tags:
        - Tenant
      security: []
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/projects'
        default:
          $ref: '#/components/responses/error_response'

  /v1/tenants/{tenant_name}/projects/{project_name}:
    parameters:
      - $ref: '#/components/parameters/tenant_param'
      - $ref: '#/components/parameters/project_param'

    get:
      description: >-
        Returns the specified projects for the given tenant.
      tags:
        - Tenant
      security: []
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        default:
          $ref: '#/components/responses/error_response'

    post:
      description: >-
        create a new project.
      tags:
        - Tenant
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        default:
          $ref: '#/components/responses/error_response'

    delete:
      description: >-
        delete an existing project.
      tags:
        - Tenant
      responses:
        '200':
          description: "successful operation."
        default:
          $ref: '#/components/responses/error_response'


  /v1/projects/{project_name}/topics/:
    parameters:
      - $ref: '#/components/parameters/project_param'
    get:
      description: >-
        list all topics of given tenant.
      tags: 
        - Topic
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topics'
        default:
          $ref: '#/components/responses/error_response'


  /v1/topics/projects/{project_name}/{topic_name}:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'

    get:
      description: >-
        TODO::Sample path url for the discussion.
        get the details of specified topic.
      tags:
        - AlternateUrlOptions
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'

  /v1/topics/{project_name}/{topic_name}:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'

    get:
      description: >-
        TODO::Sample path url for the discussion.
        get the details of specified topic.
      tags:
        - AlternateUrlOptions
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'

  /v1/topics/{project_name}:{topic_name}:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'

    get:
      description: >-
        TODO::Sample path url for the discussion.
        get the details of specified topic.
      tags:
        - AlternateUrlOptions
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'



  /v1/projects/{project_name}/topics/{topic_name}:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'
    
    get:
      description: >-
        get the details of specified topic.
      tags: 
        - Topic
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'

    post:
      description: >-
        create a new topic.
      tags: 
        - Topic
      requestBody:
        description: >-
          topic name will be used from path parameter. 
          #TODO: define a different schema for it.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic'
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'
          
    put:
      description: >-
        Update mutable properties of the topic.
      tags: 
        - Topic
      requestBody:
        description: >-
          topic name will be used from path parameter. 
          #TODO: define a different schema for it.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/topic'
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/topic'
        default:
          $ref: '#/components/responses/error_response'
          
    delete:
      description: >-
        delete the specified topic.
      tags: 
        - Topic
      responses:
        '200':
          description: "successful operation."
        default:
          $ref: '#/components/responses/error_response'
    


  /v1/projects/{project_name}/topics/{topic_name}/state:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'
    
    get:
      description: >-
        get the current produce state of the topic
      tags: 
        - Topic
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/state'
        default:
          $ref: '#/components/responses/error_response'
          
    put:
      description: >-
        Update produce state of the topic.
      tags: 
        - Topic
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                operation:
                  $ref: '#/components/schemas/op_enum'
      responses:
        '200':
          description: "successful operation."
        default:
          $ref: '#/components/responses/error_response'

  
  /v1/projects/{project_name}/topics/{topic_name}/subscriptions:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'
    get:
      description: >-
        List all subscriptions for the given topic.
      tags: 
        - Topic
        - Subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptions'
        default:
          $ref: '#/components/responses/error_response'
  
  
  /v1/projects/{project_name}/topics/{topic_name}/messages:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/topic_param'
    post:
      description: >-
        Produce one or more message(s) to a given topic.
      tags: 
        - Produce
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/message'
      responses:
        '200':
          description: "successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/produce_response'
        default:
          $ref: '#/components/responses/error_response'


  /v1/projects/{project_name}/subscriptions/:
    parameters:
      - $ref: '#/components/parameters/project_param'
    get:
      description: >-
        List all subscription under a given tenant.
      tags: 
        - Subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscriptions'
        default:
          $ref: '#/components/responses/error_response'


  /v1/projects/{project_name}/subscriptions/{sub_name}:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/sub_param'
    get:
      description: >-
        Find a subscription under a given tenant by its name.
      tags: 
        - Subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription'
        default:
          $ref: '#/components/responses/error_response'

    post:
      description: >-
        Create a new subscription under the given tenant.
      tags: 
        - Subscription
      requestBody:
        description: >-
          Subscription name will be used from path parameter. 
          #TODO: define a different schema for it.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription'
        default:
          $ref: '#/components/responses/error_response'
          
    put:
      description: >-
        Update the mutable proerties of the given subscription.
      tags: 
        - Subscription
      requestBody:
        description: >-
          Subscription name will be used from path parameter. 
          #TODO: define a different schema for it.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subscription'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subscription'
        default:
          $ref: '#/components/responses/error_response'
          
    delete:      
      description: >-
        Delete the specified subscription.
      tags: 
        - Subscription
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/error_response'
  
  
  /v1/projects/{project_name}/subscriptions/{sub_name}/state:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/sub_param'
      
    get:
      description: >-
       Get the state of the subscription.
      tags: 
        - Subscription
      responses:
        '200':
          $ref: '#/components/responses/state_response'

        default:
          $ref: '#/components/responses/error_response'
    put:
      description: >-
       Perform the specified operation asynchronously to update the Subscription state. 
       Allowed operations are block, unblock, start and stop.
      tags: 
        - Subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/state_request'
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/error_response'
  

  /v1/projects/{project_name}/subscriptions/{sub_name}/info:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/sub_param'
    get:
      description: >-
        Get the current runtime information of this subscription.
      tags: 
        - Subscription
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/consumer_info'
        default:
          $ref: '#/components/responses/error_response'


  /v1/projects/{project_name}/subscriptions/{sub_name}/dlt:
    parameters:
      - $ref: '#/components/parameters/project_param'
      - $ref: '#/components/parameters/sub_param'
      - $ref: '#/components/parameters/http_code'
      - $ref: '#/components/parameters/from_param'
      - $ref: '#/components/parameters/to_param'
      - $ref: '#/components/parameters/msg_id_param'
      - $ref: '#/components/parameters/group_id_param'
    get:
      description: >-
        View or Peek message(s) from the DLT associated with this subscription.
        Consumer pointer is not moved.
        TODO::
        - Add pagination semantics to the API.
      tags: 
        - Consume
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/received_message'
        default:
          $ref: '#/components/responses/error_response'
          
    put:
      description: >-
        Unsideline messages from DLT for further consumption.
        TODO:: Define APIs for tracking the request status.
      tags: 
        - Consume
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/error_response'
   


components:
  schemas: 
    tenant:
      type: object
      properties:
        name:
          type: string
          example: "finance"
        quota:
          type: object
          # TODO:: To be enabled later, based on enforcement static/dynamic. 
          # properties:
          #   storage:
          #     type: integer
          #   throughput:
          #     type: integer
        
    tenants:
      type: array
      items:
        $ref: '#/components/schemas/tenant'

    project:
      type: object
      properties:
        name:
          type: string
          example: "invoice-project"

    projects:
      type: array
      items:
        $ref: '#/components/schemas/project'

    property_bag:
      type: object
      additionalProperties:
        type: string
        
    retention_policy:
      type: object
      properties:
        retention_hours:
          type: integer
          example: 24
          default: 48
          maximum: 76
          
    capacity_policy:
      type: object
      properties:
        max_throughput:
          type: string
          description: "Maximum throughput in MBps/KBps/Bps."
          example: 10KBps
          
    retry_policy:
      type: object
      properties:
        retry_codes:
          type: array
          items:
            type: integer
          example: [500, 501]
        kind:
          type: string
          example: "exponential"
          enum: 
            - "exponential"
            - "linear"
        minbackoff:
          type: integer
          description: "minimum retry interval in ms."
          example: 300
        maxbackoff:
          type: integer
          description: "maxmimum retry interval in ms."
          example: 1500
        multiplier:
          type: integer
          description: "multiplier/increment in retry interval for next iteration."
          example: 10
        retry_attempts:
          type: integer
          description: "maximum retry attempts allowed."
          maximum: 3
          
    dlq_policy:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
        endpoint:
          $ref: '#/components/schemas/endpoint'
          
    consumption_policy:
      type: object
      properties:
        max_parallelism:
          type: integer
          example: 10
        recovery_allocation:
          type: number
          example: 0.5
        prefer_dlt_recovery:
          type: boolean
        max_error_threshold:
          type: number
          example: 0.25
          maximum: 0.3
        throttle_spec:
          type: object
          properties:
            factor:
              type: number
              description: "Factor by which qps needs to be increased/decreased."
              example: 0.1
            wait_seconds:
              type: integer
              description: "wait in seconds before attempting next increase/decrease step."
              example: 10
            ping_seconds:
              type: integer
              description: "When fully blocked, keep checking every ping_seconds for recovery."
              example: 20
            stop_after_seconds:
              type: integer
              description: "Mark consumption stopped if recovery doesn't happen till this time. Manual intervention needed post this."
              example: 7200
        
    topic:
      type: object
      properties:
        name:
          type: string
          example: "user-invoices"
        tenant:
          type: string
          example: "all-invoices"
        grouped:
          type: boolean
          example: true
        max_subscriptions:
          type: integer
          minimum: 1
          example: 1
        properties:
          $ref: '#/components/schemas/property_bag'
        capacity_policy:
          $ref: '#/components/schemas/capacity_policy'
        state:
          $ref: '#/components/schemas/state_enum'
        version:
          type: integer
          example: 1
          
    topics:
      type: array
      items:
        $ref: '#/components/schemas/topic'
          
    endpoint:
      type: object
      properties:
        url:
          type: string
          example: "https://invoice-signer-service/invoice/sign"
        method:
          type: string
          example: "POST"
          enum: 
            - "POST"
            - "GET"
            - "PUT"
        connect_timeout:
          type: integer
          example: 4
          default: 5
        request_timeout:
          type: integer
          example: 4
          default: 5
        auth_info:
          type: object
          properties:
            audience:
              type: string
              example: "invoice-signer-service"
          nullable: true
          
    subscription:
      type: object
      properties:
        name:
          type: string
          example: "my-sub"
        tenant:
          type: string
          example: "all-invoices"
        topic:
          type: string
          example: "user-invoices"
        grouped:
          type: boolean
          example: true
        endpoint:
          $ref: '#/components/schemas/endpoint'
        retention_policy:
          $ref: '#/components/schemas/retention_policy'
        retry_policy:
          $ref: '#/components/schemas/retry_policy'
        dlq_policy:
          $ref: '#/components/schemas/dlq_policy'
        consumption_policy:
          $ref: '#/components/schemas/consumption_policy'
        version:
          type: integer
          example: 10
          
    subscriptions:
      type: array
      items:
        $ref: '#/components/schemas/subscription'
    
    message:
      type: object
      properties:
        producer:
          type: string
          description: "Identity of application which produced this message. It will be auto populated by the platform."
        message_id:
          type: string
          format: uuid
        deduplication_id:
          type: string
          description: "Not used for now. Intended for message deduplication semantics."
        properties:
          $ref: '#/components/schemas/property_bag'
        group_id:
          type: string
        payload:
          type: string
          format: binary
        publish_time:
          # TODO:: this will be better as integer instead of string.
          type: string
          format: date-time
          description: "This will be auto populated by the platform."
          
    produce_response:
      type: object
      properties:
        message_ids:
          type: array
          items:
            type: string
          
    nullable_error:
      type: object
      properties:
        http_code:
          type: integer
          example: 503
        http_message:
          type: string
      nullable: true
          
    received_message:
      type: object
      properties:
        retried_deliveries:
          type: integer
          description: 'Number of times this message delivery was retried.'
        dlq_deliveries:
          type: integer
          description: 'Number of times this message delivery was dlqed.'
        error:
          $ref: '#/components/schemas/nullable_error'
        message:
          $ref: '#/components/schemas/message'
          
    state_enum:
      type: string
      enum: 
        - "blocked"
        - "stopped"
        - "started"
        
    state:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/state_enum'

    consumer_enum:
      type: string
      enum:
        - "main"
        - "retry"
        - "dead_letter"
        - "all"
    
    op_enum:
      type: string
      enum:
        - "start"
        - "stop"
        - "block"
    
    state_request:
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/op_enum'
        consumer_type:
          $ref: '#/components/schemas/consumer_enum'
          
    consumer_info:
      type: object
      properties:
        consumer_type:
          $ref: '#/components/schemas/consumer_enum'
        state:
          $ref: '#/components/schemas/state_enum'
        lag:
          type: integer 
        
  parameters:
    tenant_param:
      name: tenant_name
      in: path
      required: true
      description: "Name of the Varadhi tenant"
      schema:
        type: string
        example: "all-invoices"

    project_param:
      name: project_name
      in: path
      required: true
      description: "Name of the Project for the given Varadhi tenant"
      schema:
        type: string
        example: "all-invoices"

    topic_param:
      name: topic_name
      in: path
      required: true
      description: "Name of the Varadhi Topic"
      schema:
        type: string
        example: "user-invoices"
        
    sub_param:
      name: sub_name
      in: path
      required: true
      description: "Name of the Varadhi Subscription"
      schema:
        type: string
        example: "user-invoices-signing"
        
    from_param:
      name: from
      in: query
      required: false
      description: "from timestamp. If 'from' is specified, 'to' is also needed."
      schema:
        type: string
        format: date-time
        
    to_param:
      name: to
      in: query
      required: false
      description: "to timestamp. If 'to' is specified, 'from' is also needed."
      schema:
        type: string
        format: date-time
        
    http_code:
      name: code
      in: query
      required: false
      description: "Http response code"
      schema:
        type: array
        items:
          oneOf: 
            - type: string
              enum: 
                - 4XX
                - 5XX
            - type: integer
    
    msg_id_param:
      name: msg_id
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          
    group_id_param:
      name: group_id
      in: query
      required: false
      schema:
        type: array
        items:
          type: string
          
  responses:
    error_response:
      description: "Error response describing why operation failed."
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                
    state_response:
      description: "OK"
      content:
        application/json:
          schema:
            type: array
            items:
              properties:
                consumer_type:
                  $ref: '#/components/schemas/consumer_enum'
                state:
                  $ref: '#/components/schemas/state'
                  
    status_response:
      description: "OK"
      content:
        application/json:
          schema:
            type: array
            items:
              properties:
                consumer_type:
                  $ref: '#/components/schemas/consumer_enum'
                state:
                  $ref: '#/components/schemas/state'
                
  securitySchemes:
    jwt_access_token:
      type: oauth2
      flows:
        authorizationCode:
          tokenUrl: https://authn.flipkart.net/oauth/token
          authorizationUrl: https://authn.flipkart.net/oauth/authorize
          scopes:
            default: needs all scopes to perform this operation.
